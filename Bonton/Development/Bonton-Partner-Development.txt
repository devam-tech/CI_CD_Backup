pipeline {
    agent { label 'built-in' }

    environment {
        REPO_URL    = 'https://github.com/MultiiconIdeotechnology/Bonton_Web_B2B_B2C.git'
        REPO_BRANCH = 'developer'
        GIT_CRED    = 'MM_PAT'

        DEPLOY_ROOT = 'D:\\Website\\Bonton\\developer.partner.bontonholidays.com'
        APP_POOL    = 'developer.partner.bontonholidays.com'
        EXCLUDE_FILE = 'web.config'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${REPO_BRANCH}"]],
                    userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GIT_CRED}"]]
                ])
            }
        }

        stage('Build Angular') {
            steps {
                powershell '''
                    Write-Host "üì¶ Installing npm dependencies..."
                    npm install
                    if ($LASTEXITCODE -ne 0) {
                        throw "‚ùå npm install failed."
                    } else {
                        Write-Host "‚úÖ npm install completed successfully."
                    }

                    Write-Host "‚ö° Running Angular build (project: fuse, config: developer)..."
                    npx ng build fuse --configuration=developer

                    if (!(Test-Path "$env:WORKSPACE\\dist\\fuse")) {
                        throw "‚ùå Build failed. dist/fuse folder not found."
                    } else {
                        $count = (Get-ChildItem "$env:WORKSPACE\\dist\\fuse" -Recurse -File).Count
                        Write-Host "‚úÖ Build completed. dist/fuse folder created with $count files."
                    }
                '''
            }
        }

        stage('Deploy to IIS') {
            steps {
                powershell '''
                    $ErrorActionPreference = "Stop"
                    Import-Module WebAdministration

                    $publishDir = "$env:WORKSPACE\\dist\\fuse"
                    $deployRoot = "$env:DEPLOY_ROOT"
                    $appPool    = "$env:APP_POOL"

                    if (-not (Test-Path $publishDir)) { throw "‚ùå Publish folder not found: $publishDir" }

                    $maxRetries = 10
                    $sleepSec   = 7

                    # --- Stop App Pool with retry ---
                    Write-Host "‚èπÔ∏è Stopping App Pool: $appPool"
                    try {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -ne "Stopped") {
                            Stop-WebAppPool -Name $appPool -ErrorAction Stop
                            Write-Host "‚ÑπÔ∏è Stop-WebAppPool command issued."
                        } else {
                            Write-Host "‚ö†Ô∏è App Pool is already stopped."
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Could not stop App Pool directly. Will check state... ($_)"
                    }

                    $stopped = $false
                    for ($i = 1; $i -le $maxRetries; $i++) {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -eq "Stopped") {
                            Write-Host "‚úÖ App Pool stopped successfully (attempt $i)."
                            $stopped = $true
                            break
                        }
                        Write-Host "‚è≥ Waiting for App Pool to stop... (Attempt $i/$maxRetries)"
                        Start-Sleep -Seconds $sleepSec
                    }
                    if (-not $stopped) { throw "‚ùå Failed to stop App Pool after $maxRetries attempts." }

                    # --- Deploy files ---
                    Write-Host "üöÄ Deploying files from $publishDir to $deployRoot (excluding $env:EXCLUDE_FILE)"
                    robocopy "$publishDir" "$deployRoot" /E /XF "$env:EXCLUDE_FILE" /NFL /NDL /NP /NJH /NJS
                    $rc = $LASTEXITCODE
                    if ($rc -ge 8) {
                        throw "‚ùå Robocopy failed with exit code $rc"
                    } else {
                        Write-Host "‚úÖ Deployment success. Robocopy exit code: $rc"
                        $global:LASTEXITCODE = 0
                    }

                    # --- Start App Pool with retry ---
                    Write-Host "‚ñ∂Ô∏è Starting App Pool: $appPool"
                    try {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -ne "Started") {
                            Start-WebAppPool -Name $appPool -ErrorAction Stop
                            Write-Host "‚ÑπÔ∏è Start-WebAppPool command issued."
                        } else {
                            Write-Host "‚ö†Ô∏è App Pool is already running."
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Could not start App Pool directly. Will check state... ($_)"
                    }

                    $started = $false
                    for ($i = 1; $i -le $maxRetries; $i++) {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -eq "Started") {
                            Write-Host "‚úÖ App Pool started successfully (attempt $i)."
                            $started = $true
                            break
                        }
                        Write-Host "‚è≥ Waiting for App Pool to start... (Attempt $i/$maxRetries)"
                        Start-Sleep -Seconds $sleepSec
                    }
                    if (-not $started) { throw "‚ùå Failed to start App Pool after $maxRetries attempts." }

                    Write-Host "üéâ Deployment completed successfully."
                '''
            }
        }

        stage('Deployment Summary') {
            steps {
                powershell '''
                    Write-Host "===== DEPLOYMENT SUMMARY ====="
                    if (Test-Path "$env:DEPLOY_ROOT") {
                        $files = Get-ChildItem -Path "$env:DEPLOY_ROOT" -Recurse -File
                        Write-Host ("Total files deployed (excluding $env:EXCLUDE_FILE): {0}" -f $files.Count)
                    } else {
                        Write-Host "‚ùå Deployment folder missing!"
                    }
                '''
            }
        }
    }

    post {
        success { echo "‚úÖ Angular IIS deployment successful." }
        failure { echo "‚ùå Deployment failed. Check console logs for details." }
        always  { echo "‚ÑπÔ∏è Pipeline execution complete." }
    }
}