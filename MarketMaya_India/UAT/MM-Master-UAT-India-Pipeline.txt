pipeline {
    agent { label 'built-in' }

    environment {
        REPO_URL    = 'https://github.com/MultiiconIdeotechnology/MM_Web_Master.git'
        REPO_BRANCH = 'main'
        GIT_CRED    = 'MM_PAT'

        DEPLOY_ROOT = 'D:\\Website\\MarketMaya\\uat.master.marketmaya.com'
        APP_POOL    = 'uat.master.marketmaya.com'
        EXCLUDE_FILE = 'web.config'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${REPO_BRANCH}"]],
                    userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GIT_CRED}"]]
                ])
            }
        }

        stage('Build Angular') {
            steps {
                powershell '''
                    Write-Host "üì¶ Installing npm dependencies..."
                    npm install
                    if ($LASTEXITCODE -ne 0) {
                        throw "‚ùå npm install failed."
                    } else {
                        Write-Host "‚úÖ npm install completed successfully."
                    }

                    Write-Host "‚ö° Running Angular build (project: fuse, config: uat)..."
                    npx ng build fuse --configuration=uat

                    if (!(Test-Path "$env:WORKSPACE\\dist\\fuse")) {
                        throw "‚ùå Build failed. dist/fuse folder not found."
                    } else {
                        $count = (Get-ChildItem "$env:WORKSPACE\\dist\\fuse" -Recurse -File).Count
                        Write-Host "‚úÖ Build completed. dist/fuse folder created with $count files."
                    }
                '''
            }
        }

        stage('Deploy to IIS') {
            steps {
                powershell '''
                    $ErrorActionPreference = "Stop"
                    Import-Module WebAdministration

                    $publishDir = "$env:WORKSPACE\\dist\\fuse"
                    $deployRoot = "$env:DEPLOY_ROOT"
                    $appPool    = "$env:APP_POOL"

                    if (-not (Test-Path $publishDir)) { throw "‚ùå Publish folder not found: $publishDir" }

                    Write-Host "Stopping App Pool: $appPool"
                    try {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -ne 'Stopped') { Stop-WebAppPool -Name $appPool -ErrorAction Stop }
                    } catch {
                        Write-Host "‚ö†Ô∏è Could not stop app pool (might already be stopped): $_"
                    }

                    Write-Host "Deploying files from $publishDir to $deployRoot (excluding $env:EXCLUDE_FILE)"
                    robocopy "$publishDir" "$deployRoot" /E /XF "$env:EXCLUDE_FILE" /NFL /NDL /NP /NJH /NJS
                    $rc = $LASTEXITCODE
                    Write-Host "Robocopy returned exit code: $rc"

                    if ($rc -ge 8) {
                        throw "‚ùå Robocopy failed with exit code $rc"
                    } else {
                        Write-Host "‚úÖ Deployment success. Robocopy exit code: $rc"
                        $global:LASTEXITCODE = 0
                    }

                    Write-Host "Starting App Pool: $appPool"
                    Start-WebAppPool -Name $appPool

                    Write-Host "‚úÖ Deployment completed successfully."
                '''
            }
        }

        stage('Deployment Summary') {
            steps {
                powershell '''
                    Write-Host "===== DEPLOYMENT SUMMARY ====="
                    if (Test-Path "$env:DEPLOY_ROOT") {
                        $files = Get-ChildItem -Path "$env:DEPLOY_ROOT" -Recurse -File
                        Write-Host ("Total files deployed (excluding $env:EXCLUDE_FILE): {0}" -f $files.Count)
                    } else {
                        Write-Host "‚ùå Deployment folder missing!"
                    }
                '''
            }
        }
    }

    post {
        success { echo "‚úÖ Angular IIS deployment successful." }
        failure { echo "‚ùå Deployment failed. Check console logs for details." }
        always  { echo "‚ÑπÔ∏è Pipeline execution complete." }
    }
}
