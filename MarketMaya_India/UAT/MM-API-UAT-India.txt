pipeline {
    agent { label 'built-in' }

    environment {
        REPO_URL      = 'https://github.com/MultiiconIdeotechnology/MM_Web_API.git'
        REPO_BRANCH   = 'uat_india'
        GIT_CRED      = 'MM_PAT'

        DOTNET_PROJECT = "MarketMayaWebAPI"
        PUBLISH_DIR    = "${WORKSPACE}\\publish_output"
        DEPLOY_ROOT    = "D:\\Website\\MarketMaya\\uat.api.marketmaya.com"
        APP_POOL_NAME  = "uat.api.marketmaya.com"
    }

    stages {

        stage('Checkout') {
            steps {
                echo "üîÑ Checking out branch '${env.REPO_BRANCH}' from repo '${env.REPO_URL}'..."
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${env.REPO_BRANCH}"]],
                    userRemoteConfigs: [[url: "${env.REPO_URL}", credentialsId: "${env.GIT_CRED}"]]
                ])
            }
        }

        stage('Build & Publish') {
            steps {
                echo 'üõ† Building and publishing project...'

                echo 'üîß Restoring NuGet packages...'
                bat "dotnet restore ${env.DOTNET_PROJECT}"

                echo 'üõ† Building project in Release mode...'
                bat "dotnet build ${env.DOTNET_PROJECT} -c Release"

                echo 'üì¶ Publishing project to output folder...'
                bat "dotnet publish ${env.DOTNET_PROJECT} -c Release -o ${env.PUBLISH_DIR}"
            }
        }

        stage('Deploy to IIS') {
            steps {
                echo 'üöÄ Deploying to IIS...'
                powershell """
try {
    # Stop App Pool (ignore if already stopped)
    Write-Host "üõë Stopping App Pool: ${env.APP_POOL_NAME}"
    try {
        Stop-WebAppPool -Name '${env.APP_POOL_NAME}'
    } catch [System.InvalidOperationException] {
        Write-Warning "‚ö† App Pool already stopped, continuing..."
    }

    # App offline
    Write-Host "‚è∏ App offline..."
    Set-Content -Path '${env.DEPLOY_ROOT}\\app_offline.htm' -Value '<html>App is being updated, please wait...</html>'

    # Copy files with minimal output
    Write-Host "üìÇ Copying files..."
    robocopy '${env.PUBLISH_DIR}' '${env.DEPLOY_ROOT}' /E /XO /XF web.config *.json /XD Content Logs /NJH /NJS /NP /NS /NC
    \$rc = \$LASTEXITCODE

    # Bring app online
    Remove-Item '${env.DEPLOY_ROOT}\\app_offline.htm' -Force
    Write-Host "‚úÖ App online."

    # Start App Pool with retry
    Write-Host "üîÑ Starting App Pool: ${env.APP_POOL_NAME}"
    \$retries = 5
    while (\$retries -gt 0) {
        try {
            Start-WebAppPool -Name '${env.APP_POOL_NAME}'
            Write-Host "üîπ App Pool started successfully."
            break
        } catch {
            Write-Warning "‚ö† Could not start App Pool. Retrying in 5 seconds..."
            Start-Sleep -Seconds 5
            \$retries--
            if (\$retries -eq 0) { 
                Write-Error "‚ùå Failed to start App Pool after multiple attempts."
                exit 1
            }
        }
    }

    # Robocopy exit code handling (0-7 success, 8+ failure)
    if (\$rc -ge 0 -and \$rc -le 7) {
        Write-Host "üéâ Deployment completed successfully! (Robocopy Exit Code: \$rc)"
        exit 0  # Force Jenkins to see this as success
    } else {
        Write-Error "‚ùå Deployment failed! (Robocopy Exit Code: \$rc)"
        exit 1
    }

} catch {
    Write-Error "‚ùå Deployment failed: \$_.Exception.Message"
    exit 1
}
"""
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
        }
        always {
            echo 'üìù Pipeline finished.'
        }
    }
}
