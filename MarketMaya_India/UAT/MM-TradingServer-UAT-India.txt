pipeline { 
    agent { label 'built-in' }

    environment {
        REPO_URL        = 'https://github.com/MultiiconIdeotechnology/MM_Trading_Server.git'
        REPO_BRANCH     = 'indicator_plugin'
        GIT_CRED        = 'MM_PAT'

        DEPLOY_ROOT     = 'D:\\Website\\MarketMaya\\Win Services\\Trading Server'
        DOTNET_PROJECT  = "MarketMayaTradingServer"
        WORKSPACE_PUBLISH_DIR = "${env.WORKSPACE}\\MarketMayaTradingServer\\bin\\Debug\\"
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timestamps()
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                  branches: [[name: "*/${REPO_BRANCH}"]],
                  userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GIT_CRED}"]]
                ])
            }
        }

        stage('Sanity checks') {
            steps {
                powershell '''
                    $ErrorActionPreference = "Stop"
                    if (-not (Test-Path "$env:DEPLOY_ROOT")) { New-Item -ItemType Directory -Force -Path "$env:DEPLOY_ROOT" | Out-Null }
                    git --version | Out-Null
                    Write-Host "Current HEAD: $(git rev-parse HEAD).Trim()"
                '''
            }
        }

        stage('Build & Publish') {
            steps {
                bat "D:\\devam\\nuget.exe restore ${DOTNET_PROJECT}.sln"

                powershell '''
                    if (-not (Test-Path "$env:WORKSPACE_PUBLISH_DIR")) {
                        New-Item -ItemType Directory -Force -Path "$env:WORKSPACE_PUBLISH_DIR" | Out-Null
                    }
                '''

                script {
                    def msbuildCmd = "\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" " +
                                     "\"${DOTNET_PROJECT}.sln\" " +
                                     "/p:Configuration=Debug " +
                                     "/p:DeployOnBuild=true " +
                                     "/p:PublishDir=\"${env.WORKSPACE_PUBLISH_DIR}\""
                    bat msbuildCmd
                }
            }
        }

        stage('Services & Deployment Tasks') {
            steps {
                powershell '''
                    $ErrorActionPreference = 'Stop'

                    $publishDir = "$env:WORKSPACE_PUBLISH_DIR"
                    $deployRoot = "$env:DEPLOY_ROOT"
                    $allowedExt = @('.exe','.dll','.pdb')

                    # --- 1. Stop all services ---
                    for ($i = 0; $i -le 8; $i++) {
                        $svcName = "MarketMayaTradingServerLevel$i"
                        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
                        if ($svc -and $svc.Status -ne 'Stopped') {
                            Write-Host "Stopping service: $svcName"
                            Stop-Service -Name $svcName -Force
                            # Shortened wait loop (max ~3s instead of 20s)
                            for ($j=0; $j -lt 3; $j++) {
                                Start-Sleep -Seconds 1
                                if (-not (Get-Process -Name "MarketMayaTradingServer" -ErrorAction SilentlyContinue)) { break }
                            }
                        } else {
                            Write-Host "Service $svcName is already stopped or not installed."
                        }
                    }

                    # --- 2. Copy files to all levels ---
                    if (Test-Path $publishDir) {
                        $files = Get-ChildItem -Path $publishDir -Recurse | Where-Object {
                            -not $_.PSIsContainer -and $allowedExt -contains $_.Extension.ToLower()
                        }

                        for ($i = 0; $i -le 8; $i++) {
                            $deployDir = Join-Path $deployRoot "Level $i"
                            if (-not (Test-Path $deployDir)) { New-Item -ItemType Directory -Force -Path $deployDir | Out-Null }

                            foreach ($src in $files) {
                                $relativePath = $src.FullName.Substring($publishDir.Length).TrimStart('\\')
                                $dst = Join-Path $deployDir $relativePath
                                $dstDir = Split-Path $dst -Parent
                                if (-not (Test-Path $dstDir)) { New-Item -ItemType Directory -Force -Path $dstDir | Out-Null }

                                $retry = 5
                                while ($retry -gt 0) {
                                    try {
                                        Copy-Item -Path $src.FullName -Destination $dst -Force -ErrorAction Stop
                                        Write-Host "[$i] Copied: $relativePath"
                                        break
                                    } catch {
                                        Write-Host "File locked, retrying in 2s..."
                                        Start-Sleep -Seconds 2
                                        $retry--
                                    }
                                }
                                if ($retry -eq 0) { Write-Host "‚ùå Failed to copy $relativePath after retries." }
                            }
                        }
                    } else {
                        Write-Host "‚ö†Ô∏è Publish directory not found: $publishDir. Skipping deployment."
                    }

                    # --- 3. Restart all services + Health Check ---
                    for ($i = 0; $i -le 8; $i++) {
                        $svcName = "MarketMayaTradingServerLevel$i"
                        $maxRetries = 3
                        for ($r=1; $r -le $maxRetries; $r++) {
                            $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
                            if ($svc.Status -eq 'Running') { break }

                            Write-Host "[$r/$maxRetries] Starting service: $svcName"
                            Start-Service -Name $svcName
                            Start-Sleep -Seconds 1   # shortened from 5s to 1s
                        }

                        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
                        if (-not $svc) { Write-Host "$svcName not installed"; exit 1 }
                        if ($svc.Status -ne 'Running') { Write-Host "$svcName failed to run"; exit 1 }

                        # Health check (basic: process alive OR optional TCP ping if port known)
                        $proc = Get-Process -Name "MarketMayaTradingServer" -ErrorAction SilentlyContinue
                        if ($proc) {
                            Write-Host "‚úÖ Health check passed for $svcName (process running)."
                        } else {
                            Write-Host "‚ùå Health check failed for $svcName."
                            exit 1
                        }
                    }
                '''
            }
        }

        stage('Deployment summary') {
            steps {
                powershell '''
                    Write-Host "===== DEPLOYMENT SUMMARY ====="
                    $allowedExt = @('.exe','.dll','.pdb')
                    for ($i = 0; $i -le 8; $i++) {
                        $deployDir = Join-Path "$env:DEPLOY_ROOT" "Level $i"
                        if (Test-Path $deployDir) {
                            $files = Get-ChildItem -Path $deployDir -Recurse | Where-Object {
                                -not $_.PSIsContainer -and $allowedExt -contains $_.Extension.ToLower()
                            }
                            Write-Host "üìÇ Level $i deployment folder: $deployDir"
                            Write-Host "‚úÖ Files deployed here: $($files.Count)`n"
                        } else {
                            Write-Host "‚ö†Ô∏è Level $i folder missing: $deployDir"
                        }
                    }
                '''
            }
        }
    }

    post {
        success { echo "‚úÖ UAT India deployment successful." }
        failure { echo "‚ùå Deployment failed. Check console logs." }
        always  { echo "‚ÑπÔ∏è Build complete." }
    }
}
