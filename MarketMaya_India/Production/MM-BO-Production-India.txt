pipeline {
    agent { label 'aws-marketmaya-india-windows' }
	
	tools { 
        nodejs 'node19'
    }
	
    environment {
        REPO_URL    = 'https://github.com/MultiiconIdeotechnology/MM_Web_Backoffice.git'
        REPO_BRANCH = 'main'
        GIT_CRED    = 'MM_PAT'

        DEPLOY_ROOT   = 'D:\\jenkins-agent\\Testing\\MarketMaya\\BO'
        APP_POOL      = 'todoapi.multiicon.in'
        EXCLUDE_FILE  = 'web.config'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${REPO_BRANCH}"]],
                    userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GIT_CRED}"]]
                ])
            }
        }
		
		stage('Check Node & NPM') {
            steps {
                script {
                    bat 'node -v'
                    bat 'npm -v'
                }
            }
        }
		
		stage('Install Dependencies') {
            steps {
                bat 'npm install --legacy-peer-deps'
            }
        }

        stage('Build Angular') {
            steps {
                script {
                    echo "‚ö° Running Angular build..."
                    bat '''
                        set NODE_OPTIONS=--openssl-legacy-provider
                        npx ng build fuse --configuration production
                    '''
                    bat '''
                        # üîπ Determine correct build path
                    if (Test-Path "$env:WORKSPACE\\dist\\fuse\\browser") {
                        $buildPath = "$env:WORKSPACE\\dist\\fuse\\browser"
                    } elseif (Test-Path "$env:WORKSPACE\\dist\\fuse") {
                        $buildPath = "$env:WORKSPACE\\dist\\fuse"
                    } else {
                        throw "‚ùå Build failed. dist/fuse (or dist/fuse/browser) folder not found."
                    }
                    '''
                }
            }
        }

        stage('Rollback') {
            when {
                expression { currentBuild.currentResult == "FAILURE" }
            }
            steps {
                powershell '''
                    Import-Module WebAdministration

                    $appPool = "$env:APP_POOL"
                    Write-Host "üîÑ Rollback triggered due to failure. Ensuring App Pool is running..."

                    try {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -ne 'Started') {
                            Start-WebAppPool -Name $appPool
                            Write-Host "‚úÖ App Pool restarted during rollback."
                        } else {
                            Write-Host "‚ÑπÔ∏è App Pool already running."
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Could not verify/start App Pool: $_"
                    }
                '''
            }
        }

        stage('Deploy to IIS') {
            steps {
                powershell '''
                    $ErrorActionPreference = "Stop"
                    Import-Module WebAdministration

                    $envFile = "$env:WORKSPACE\\build.env"
                    if (Test-Path $envFile) {
                        Get-Content $envFile | ForEach-Object {
                            if ($_ -match "^(.*?)=(.*)$") {
                                Set-Item -Force -Path "env:$($matches[1])" -Value $matches[2]
                            }
                        }
                    }

                    $publishDir = $env:BUILD_PATH
                    $deployRoot = "$env:DEPLOY_ROOT"
                    $appPool    = "$env:APP_POOL"

                    if (-not (Test-Path $publishDir)) { throw "‚ùå Publish folder not found: $publishDir" }

					$maxRetries = 10
                    $sleepSec   = 7
					
                    # --- Stop App Pool with retry ---
                    Write-Host "‚èπÔ∏è Stopping App Pool: $appPool"
                    Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue

                    $stopped = $false
                    for ($i = 1; $i -le $maxRetries; $i++) {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -eq "Stopped") {
                            Write-Host "‚úÖ App Pool stopped successfully (attempt $i)."
                            $stopped = $true
                            break
                        }
                        Write-Host "‚è≥ Waiting for App Pool to stop... (Attempt $i/$maxRetries)"
                        Start-Sleep -Seconds $sleepSec
                    }
                    if (-not $stopped) { throw "‚ùå Failed to stop App Pool after $maxRetries attempts." }

                    # --- Deploy files ---
                    Write-Host "üöÄ Deploying files from $publishDir to $deployRoot (excluding $env:EXCLUDE_FILE)"
                    robocopy "$publishDir" "$deployRoot" /E /XF "$env:EXCLUDE_FILE"
                    $rc = $LASTEXITCODE
                    if (\$rc -ge 0 -and \$rc -le 7) {
						Write-Host "üéâ Deployment completed successfully! (Robocopy Exit Code: \$rc)"
						 $global:LASTEXITCODE = 0
					} else {
						Write-Error "‚ùå Deployment failed! (Robocopy Exit Code: \$rc)"
						exit 1
					}

                    # --- Start App Pool with retry ---
                    Write-Host "‚ñ∂Ô∏è Starting App Pool: $appPool"
                    Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue

                    $started = $false
                    for ($i = 1; $i -le $maxRetries; $i++) {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -eq "Started") {
                            Write-Host "‚úÖ App Pool started successfully (attempt $i)."
                            $started = $true
                            break
                        }
                        Write-Host "‚è≥ Waiting for App Pool to start... (Attempt $i/$maxRetries)"
                        Start-Sleep -Seconds $sleepSec
                    }
                    if (-not $started) { throw "‚ùå Failed to start App Pool after $maxRetries attempts." }

                    Write-Host "üéâ Deployment completed successfully."
                '''
            }
        }

        stage('Deployment Summary') {
            steps {
                powershell '''
                    Write-Host "===== DEPLOYMENT SUMMARY ====="
                    if (Test-Path "$env:DEPLOY_ROOT") {
                        $files = Get-ChildItem -Path "$env:DEPLOY_ROOT" -Recurse -File
                        Write-Host ("Total files deployed (excluding $env:EXCLUDE_FILE): {0}" -f $files.Count)
                    } else {
                        Write-Host "‚ùå Deployment folder missing!"
                    }
                '''
            }
        }
    }

    post {
        success { echo "‚úÖ Angular IIS deployment successful." }
        failure { echo "‚ùå Deployment failed. Rollback ensured App Pool is running." }
        always  { echo "‚ÑπÔ∏è Pipeline execution complete." }
    }
}
