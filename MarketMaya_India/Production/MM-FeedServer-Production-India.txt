pipeline {
    agent none

    environment {
        REPO_URL       = 'https://github.com/MultiiconIdeotechnology/MI_Feed_Server'
        REPO_BRANCH    = 'main'
        GIT_CRED       = 'MM_PAT'
        DOTNET_PROJECT = 'MIFeedServer' 
        PUBLISH_DIR    = 'publish_output'
        APP_POOLS      = 'mifeed1.marketmaya.com,mifeed2.marketmaya.com,mifeed3.marketmaya.com'
        DEPLOY_ROOTS   = 'C:\\MarketMaya\\Website\\mifeed1.marketmaya.com,C:\\MarketMaya\\Website\\mifeed2.marketmaya.com,C:\\MarketMaya\\Website\\mifeed3.marketmaya.com'
        ALLOWED_JSON   = 'MIFeedServer.deps.json'
    }

    stages {
        stage('Build') {
            agent { label 'built-in' }

            stages {
                stage('Checkout') {
                    steps {
                        echo "Checking out '${env.REPO_BRANCH}' from '${env.REPO_URL}'..."
                        checkout([$class: 'GitSCM',
                            branches: [[name: "*/${env.REPO_BRANCH}"]],
                            userRemoteConfigs: [[url: "${env.REPO_URL}", credentialsId: "${env.GIT_CRED}"]]
                        ])
                    }
                }

                stage('Build & Publish') {
                    steps {
                        echo 'Restoring, building, and publishing project...'
                        bat "dotnet restore ${env.DOTNET_PROJECT}"
                        bat "dotnet build ${env.DOTNET_PROJECT} -c Release"
                        bat "dotnet publish ${env.DOTNET_PROJECT} -c Release -o ${env.PUBLISH_DIR}"
                    }
                }

                stage('Archive & Stash') {
                    steps {
                        echo 'Archiving and stashing publish_output...'
                        archiveArtifacts artifacts: "${env.PUBLISH_DIR}/**", fingerprint: true
                        stash name: 'publish_output', includes: "${env.PUBLISH_DIR}/**"
                    }
                }
            }
        }

        stage('Deploy') {
            agent { label 'aws-marketmaya-india-window' }

            steps {
                echo 'Deploying to IIS for all app pools...'
                unstash 'publish_output'

                script {
                    def pools = env.APP_POOLS.split(',')
                    def roots = env.DEPLOY_ROOTS.split(',')

                    for (int i = 0; i < pools.size(); i++) {
                        def pool = pools[i].trim()
                        def root = roots[i].trim()
                        echo "Deploying to App Pool: ${pool}, Path: ${root}"

                        powershell """
try {
    # Stop App Pool
    Write-Host "Stopping App Pool: ${pool}"
    \$retries = 10
    while (\$retries -gt 0) {
        try {
            Stop-WebAppPool -Name '${pool}' -ErrorAction Stop
            Write-Host "App Pool stopped."
            break
        } catch {
            Write-Warning "Retry stopping App Pool... (\$retries left)"
            Start-Sleep -Seconds 7
            \$retries--
        }
    }

    # Offline notice
    Set-Content -Path '${root}\\app_offline.html' -Value '<html>Updating, please wait...</html>'

    # Deploy files (no delete, only update)
    robocopy '${env.WORKSPACE}\\${env.PUBLISH_DIR}' '${root}' /E /XO /XF web.config *.json /NFL /NDL /NP
    robocopy '${env.WORKSPACE}\\${env.PUBLISH_DIR}' '${root}' '${env.ALLOWED_JSON}' /XO /NFL /NDL /NP
    \$rc = \$LASTEXITCODE
    Write-Host "Robocopy Exit Code: \$rc"

    # Remove offline file
    Remove-Item '${root}\\app_offline.html' -Force -ErrorAction SilentlyContinue

    # Start App Pool
    Write-Host "Starting App Pool: ${pool}"
    \$retries = 10
    while (\$retries -gt 0) {
        try {
            Start-WebAppPool -Name '${pool}' -ErrorAction Stop
            Write-Host "App Pool started."
            break
        } catch {
            Write-Warning "Retry starting App Pool... (\$retries left)"
            Start-Sleep -Seconds 7
            \$retries--
        }
    }

    # Handle robocopy result
    if (\$rc -ge 0 -and \$rc -le 7) {
        Write-Host "Deployment successful! (Code: \$rc)"
        exit 0
    } elseif (\$rc -gt 7 -and \$rc -lt 16) {
        Write-Warning "Deployment completed with warnings. (Code: \$rc)"
        exit 0
    } else {
        Write-Error "Deployment failed! (Code: \$rc)"
        exit 1
    }

} catch {
    Write-Error "Deployment error: \$_.Exception.Message"
    exit 1
}
"""
                    }
                }
            }
        }

        stage('Rollback') {
            when {
                expression { currentBuild.currentResult == "FAILURE" }
            }
            steps {
                echo 'Rollback triggered. Restarting IIS App Pools...'
                script {
                    def pools = env.APP_POOLS.split(',')
                    for (pool in pools) {
                        pool = pool.trim()
                        powershell """
try {
    if ((Get-WebAppPoolState -Name '${pool}').Value -ne 'Started') {
        Start-WebAppPool -Name '${pool}'
        Write-Host "App Pool restarted."
    } else {
        Write-Host "App Pool already running."
    }
} catch {
    Write-Error "Rollback failed: \$_.Exception.Message"
}
"""
                    }
                }
            }
        }
    }

    post {
        success { echo '‚úÖ Pipeline completed successfully!' }
        failure { echo '‚ùå Pipeline failed. Check logs.' }
        always  { echo 'üìù Pipeline finished.' }
    }
}