pipeline {
    agent none

    environment {
        REPO_URL     = 'https://github.com/MultiiconIdeotechnology/MM_Web_Community.git'
        REPO_BRANCH  = 'main'
        GIT_CRED     = 'MM_PAT'

        DEPLOY_ROOT  = 'D:\\jenkins-agent\\Testing\\MarketMaya\\Community'
        APP_POOL     = 'todoapi.multiicon.in'
    }

    stages {

        stage('Build') {
            agent { label 'built-in' }
            stages {

                stage('Checkout') {
                    steps {
                        checkout([$class: 'GitSCM',
                            branches: [[name: "*/${REPO_BRANCH}"]],
                            userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GIT_CRED}"]]
                        ])
                    }
                }

                stage('Build Angular') {
                    steps {
                        powershell '''
                            $ErrorActionPreference = "Stop"

                            Write-Host "üì¶ Installing npm dependencies..."
                            npm install --legacy-peer-deps
                            if ($LASTEXITCODE -ne 0) { throw "npm install failed." }

                            Write-Host "‚ö° Running Angular build..."
                            npx ng build fuse --configuration=production
                            if ($LASTEXITCODE -ne 0) { throw "ng build failed." }
                        '''
                    }
                }
            }
        }

        stage('Prepare Artifacts') {
            agent { label 'built-in' }
            steps {
                powershell '''
                    $ErrorActionPreference = "Stop"

                    $buildPath = ""
                    if (Test-Path "$env:WORKSPACE\\dist\\fuse\\browser") { $buildPath = "$env:WORKSPACE\\dist\\fuse\\browser" }
                    elseif (Test-Path "$env:WORKSPACE\\dist\\fuse") { $buildPath = "$env:WORKSPACE\\dist\\fuse" }
                    else { throw "Build output not found." }

                    $publishOut = "$env:WORKSPACE\\publish_output"
                    if (Test-Path $publishOut) { Remove-Item -Recurse -Force $publishOut }
                    New-Item -ItemType Directory -Path $publishOut | Out-Null

                    Copy-Item -Path "$buildPath\\*" -Destination $publishOut -Recurse -Force

                    $count = (Get-ChildItem $publishOut -Recurse -File).Count
                    Write-Host "‚úÖ Prepared artifacts. $publishOut contains $count files."
                '''
                archiveArtifacts artifacts: 'publish_output/**', fingerprint: true, onlyIfSuccessful: true
                stash name: 'artifact_bundle', includes: 'publish_output/**'
            }
        }

        stage('Deploy') {
            agent { label 'aws-marketmaya-india-windows' }
            steps {
                unstash 'artifact_bundle'
                powershell '''
                    $ErrorActionPreference = "Stop"
                    Import-Module WebAdministration

                    $deployRoot = "${env:DEPLOY_ROOT}"
                    $appPool    = "${env:APP_POOL}"
                    $publishDir = "$env:WORKSPACE\\publish_output"

                    if (-not (Test-Path $publishDir)) { throw "Publish folder not found." }
                    if (-not (Test-Path $deployRoot)) { New-Item -ItemType Directory -Force -Path $deployRoot | Out-Null }

                    $maxRetries = 10
                    $sleepSec   = 7

                    # Stop App Pool only if it's not already stopped
                    try { $state = (Get-WebAppPoolState -Name $appPool).Value } catch { $state = $null }
                    if ($state -eq "Stopped") {
                        Write-Host "‚ÑπÔ∏è App Pool '$appPool' already stopped, skipping stop."
                    } else {
                        Write-Host "‚èπÔ∏è Stopping App Pool: $appPool"
                        Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                        for ($i = 1; $i -le $maxRetries; $i++) {
                            try { $state = (Get-WebAppPoolState -Name $appPool).Value } catch { $state = $null }
                            if ($state -eq "Stopped") { Write-Host "‚úÖ Stopped (attempt $i)."; break }
                            Start-Sleep -Seconds $sleepSec
                            Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                        }
                    }

                    # Deploy files (robocopy)
                    robocopy "$publishDir" "$deployRoot" /E /XO /XF web.config /NFL /NDL /NP
                    $rc = $LASTEXITCODE

                    if ($rc -ge 0 -and $rc -le 7) {
                        Write-Host "‚úÖ Deployment successful! (Exit $rc)"
                        $global:LASTEXITCODE = 0
                    } elseif ($rc -gt 7 -and $rc -lt 16) {
                        Write-Warning "‚ö† Deployment completed with warnings. (Exit $rc)"
                        $global:LASTEXITCODE = 0
                    } else {
                        Write-Error "‚ùå Deployment failed! (Exit $rc)"
                        exit 1
                    }

                    # Start App Pool
                    Write-Host "‚ñ∂Ô∏è Starting App Pool: $appPool"
                    Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    for ($i = 1; $i -le $maxRetries; $i++) {
                        try { $state = (Get-WebAppPoolState -Name $appPool).Value } catch { $state = $null }
                        if ($state -eq "Started") { Write-Host "‚úÖ Started (attempt $i)."; break }
                        Start-Sleep -Seconds $sleepSec
                        Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    }
                '''
            }
        }

        stage('Deployment Summary') {
            agent { label 'aws-marketmaya-india-windows' }
            steps {
                powershell '''
                    Write-Host "===== DEPLOYMENT SUMMARY ====="
                    if (Test-Path "${env:DEPLOY_ROOT}") {
                        $files = Get-ChildItem -Path "${env:DEPLOY_ROOT}" -Recurse -File
                        Write-Host ("Total files deployed (excluding web.config): {0}" -f $files.Count)
                    } else { Write-Host "‚ùå Deployment folder missing!" }
                '''
            }
        }

        stage('Rollback') {
            when { expression { currentBuild.currentResult == "FAILURE" } }
            agent { label 'aws-marketmaya-india-windows' }
            steps {
                powershell '''
                    Import-Module WebAdministration
                    $appPool = "${env:APP_POOL}"
                    Write-Host "üîÑ Rollback: ensuring App Pool is running..."
                    try {
                        $state = (Get-WebAppPoolState -Name $appPool).Value
                        if ($state -ne 'Started') { Start-WebAppPool -Name $appPool; Write-Host "‚úÖ App Pool restarted." }
                        else { Write-Host "‚ÑπÔ∏è Already running." }
                    } catch { Write-Host "‚ö†Ô∏è Could not verify/start App Pool: $_" }
                '''
            }
        }
    }

    post {
        success { echo "‚úÖ Angular IIS deployment successful." }
        failure { echo "‚ùå Deployment failed. Rollback attempted." }
        always  { echo "‚ÑπÔ∏è Pipeline execution complete." }
    }
}
